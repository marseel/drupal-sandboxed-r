<?php

function r_menu() {
    $items['admin/config/content/r'] = array(
        'title' => 'R',
        'description' => 'Necessary directories and paths.',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('r_admin_settings'),
        'access arguments' => array('administer site configuration'),
        'file' => 'r.admin.inc',
    );

  return $items;
}

function r_filter_info() {
    $filters['filter_r'] = array(
        'title' => t('R Filter'),
        'description' => t('Run R commands. Example of use: [R]rnorm(30,0,1);[/R]'),
            'process callback' => '_filter_r_process',
        'tips callback'  => '_filter_r_tips',
        'cache' => FALSE,
    );

    $filters['filter_sandboxed_r'] = array(
        'title' => t('Sandboxed R Filter'),
        'description' => t('Run R commands in sandboxed environment. Example of use: [R]rnorm(30,0,1);[/R]'),
            'process callback' => '_filter_sandboxed_r_process',
        'tips callback'  => '_filter_r_tips',
        'cache' => FALSE,
    );

  return $filters;
}

function _filter_callback($matches, $sandbox) {
    $hash = sha1($matches[1]);

    if ($sandbox == 1) {
        $hash = $hash . 'SANDBOX';
    }

    $code_out = '<pre>' . $matches[1] . '</pre>';

    if (file_exists(variable_get('r_cache', '/tmp') . '/R.' . $hash . '.out')) {
        $output = '<pre>' . file_get_contents(variable_get('r_cache', '/tmp') . '/R.' . $hash . '.out') . '</pre>';
        return $code_out . $output;
    }
    else {
        $fh = fopen(variable_get('r_tmp', '/tmp') . '/R.' . $hash . '.in', 'w');
        fwrite($fh, $matches[1]);
        fclose($fh);

        $output = _r_exec($hash, $sandbox);
        file_put_contents(variable_get('r_cache', '/tmp') . '/R.' . $hash . '.out', $output);
        return $code_out . '<pre>' . $output . '</pre>';
    }
}

function _r_filter_callback($matches) {
    return _filter_callback($matches, 0);
}

function _sandboxed_r_filter_callback($matches) {
    return _filter_callback($matches, 1);
}

function _r_exec($hash, $sandbox) {
    $exec = 'cd '. variable_get('r_tmp', '/tmp') . ';'
        . variable_get('r_path', '/usr/bin/R')
        . ' --slave '
        . '--no-restore '
        . '--file=';
    $in_file = variable_get('r_tmp', '/tmp')
            . '/R.' . $hash . '.in ';
    if ($sandbox == 1) {
        $exec = $exec
            . dirname(__FILE__) . '/sandbox/runner.R '
            . '--args ' . $in_file
            . ' ' . dirname(__FILE__) . '/sandbox/';
    } else {
        $exec = $exec . $in_file;
    }

    $exec = $exec
        . ' > '
        . variable_get('r_tmp', '/tmp')
        . '/R.' . $hash . '.out ';

    shell_exec($exec);
    $output = file_get_contents(variable_get('r_tmp', '/tmp') . '/R.' . $hash . '.out');
    unlink(variable_get('r_tmp', '/tmp') . '/R.' . $hash . '.out');
    return $output;
}

function _filter_r_tips($filter, $format, $long = FALSE) {
    return t('Embed expression as [R]rnorm(5, 0, 1);[/R] to be evaluated by R within content.');
}

function _filter_r_process($text, $filter, $format) {
    return preg_replace_callback('/\[R\](.*?)\[\/R\]/s', '_r_filter_callback', $text);
}

function _filter_sandboxed_r_process($text, $filter, $format) {
    return preg_replace_callback('/\[R\](.*?)\[\/R\]/s', '_sandboxed_r_filter_callback', $text);
}

function r_flush_caches() {
    shell_exec('rm ' . variable_get('r_tmp', '/tmp') . '/R.*.in > /dev/null 2>&1');
    shell_exec('rm ' . variable_get('r_cache', '/tmp'). '/R.*.out > /dev/null 2>&1');
}
